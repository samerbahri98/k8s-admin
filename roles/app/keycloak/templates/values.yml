---
global:
  storageClass: "openebs-hostpath"
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
auth:
  adminUser: "{{ keycloak_admin_username }}"
  adminPassword: "{{ keycloak_admin_password }}"
  tls:
    enabled: true
    autoGenerated: true
    existingSecret: wildcard-k8s-samerbahri-tk-tls
    usePem: false
    truststoreFilename: ""
    keystoreFilename: ""
    jksSecret: ""
    keystorePassword: ""
    truststorePassword: ""
    resources:
      limits: {}
      requests: {}
proxy: passthrough
httpRelativePath: "/"
configuration: ""
existingConfigmap: ""
extraStartupArgs: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
command: []
args: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
replicaCount: 1
containerPorts:
  http: 8080
  https: 8443
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
resources:
  limits: {}
  requests: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycleHooks: {}
hostAliases: []
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podManagementPolicy: Parallel
priorityClassName: ""
schedulerName: ""
terminationGracePeriodSeconds: ""
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []
service:
  type: clusterIP
  http:
    enabled: true
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  sessionAffinity: None
  sessionAffinityConfig: {}
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
ingress:
  enabled: true
  ingressClassName: "nginx"
  pathType: Prefix
  apiVersion: ""
  hostname: keycloak.k8s.samerbahri.tk
  path: /
  servicePort: http
  annotations: {}
  tls: true
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls:
    - hosts:
        - "*.k8s.samerbahri.tk"
      secretName: wildcard-k8s-samerbahri-tk-tls
  secrets: []
  extraRules: []
networkPolicy:
  enabled: false
  allowExternal: true
  additionalRules: {}
serviceAccount:
  create: true
  name: "keycloak"
  automountServiceAccountToken: true
  annotations: {}
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""
keycloakConfigCli:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 5.3.1-debian-11-r14
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  command: []
  args: []
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  backoffLimit: 1
  podLabels: {}
  podAnnotations: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  configuration: {}
  existingConfigmap: ""
postgresql:
  enabled: true
  auth:
    username: "{{ db_name }}"
    password: "{{ db_password }}"
    database: "{{ db_name }}"
    existingSecret: ""
  architecture: standalone
externalDatabase:
  host: "{{ db_host }}"
  port: 5432
  user: "{{ db_password }}"
  database: "{{ db_name }}"
  password: "{{ db_password }}"
  existingSecret: ""
  existingSecretPasswordKey: ""
cache:
  enabled: false
logging:
  output: default
